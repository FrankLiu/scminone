#! /apps/public/perl_5.8.7/bin/perl -w

use Spreadsheet::WriteExcel;                             
use Getopt::Long;
use FileHandle;
#####################################################################
#
# subroutines
#
#####################################################################

sub print_output {
  my ($ref,$completed,$total) = @_;

  #print output in text format
  #print "****************************************************************************************************\n";
  #print "        BRANCH: $int_br\n";
  #print "        VIEW: $view_short[-1]\n";
  #print "****************************************************************************************************\n";
  #print "             Merged                        Merge           Merge                BLD\n";
  #print "             Branch                        Begun           Done                 Label\n";
  #print "-------------------------------------  -------------  --------------  ----------------------------\n";
  foreach (sort {$ref->{$a}{label} cmp $ref->{$b}{label}} keys %{$ref}) {
    print "\t$_\t$ref->{$_}{begun}\t$ref->{$_}{done}\t$ref->{$_}{label}\t$ref->{$_}{timestamp}\t$ref->{$_}{component}\t$ref->{$_}{state}\t$ref->{$_}{TA}\t$ref->{$_}{CRN}\t$ref
->{$_}{SRN}\t$ref->{$_}{HL}\n";
  }
  print "****************************************************************************************************\n";
  print "Merges completed/Total Merges Required = $completed/$total\n";
}
sub excel_output {
  my ($ref,$completed,$total,$file,$br) = @_;

  # store output in excel spreadsheet
  if (-e $file && !-w $file) {
    print "$file exists but is not writable\n";
    return 0;
  }

  my $workbook = Spreadsheet::WriteExcel->new($file);
  my $format_mergecell = $workbook->add_format(valign => 'vcenter', align => 'left');
  my $format_heading = $workbook->add_format(valign => 'vcenter', align => 'center', bold => 1);
  my $format_body = $workbook->add_format(valign => 'vcenter', align => 'center');
  my $format_body1 = $workbook->add_format(valign => 'vcenter', align => 'left');
  
  my $worksheet = $workbook->add_worksheet();   
  $worksheet->set_column(0,0,16);
  $worksheet->set_column(1,2,14);
  $worksheet->set_column(3,4,30);
  $worksheet->set_column(5,5,24);
  $worksheet->set_column(6,6,10);
  $worksheet->set_column(7,7,30);
  $worksheet->set_column(8,9,18);
  $worksheet->set_column(10,10,80);
  $worksheet->write(3,0,"Merged Branch", $format_heading);
  $worksheet->write(3,1,"Merge Begun", $format_heading);
  $worksheet->write(3,2,"Merge Done", $format_heading);
  $worksheet->write(3,3,"BLD/INT Label", $format_heading);
  $worksheet->write(3,4,"Time Stamp", $format_heading);
  $worksheet->write(3,5,"Component/FA", $format_heading);
  $worksheet->write(3,6,"State", $format_heading);
  $worksheet->write(3,7,"Technical Authority", $format_heading);
  $worksheet->write(3,8,"CR", $format_heading);
  $worksheet->write(3,9,"Parent SR", $format_heading);
  $worksheet->write(3,10,"Headline", $format_heading);

  $worksheet->merge_range(0,0,0,10,"BRANCH: $br",$format_mergecell);
  $worksheet->merge_range(1,0,1,10,"VIEW: $br",$format_mergecell);
  $worksheet->merge_range(2,0,2,10," ",$format_mergecell);
  my $i = 3;     
  foreach (sort {$ref->{$a}{label} cmp $ref->{$b}{label}} keys %{$ref}) {
    $worksheet->write_string($i+1,0,$_,$format_body); # Merged Branch
    $worksheet->write_string($i+1,1,$ref->{$_}{begun},$format_body); # Merge Begun
    $worksheet->write_string($i+1,2,$ref->{$_}{done},$format_body); # Merge Done
    $worksheet->write_string($i+1,3,$ref->{$_}{label},$format_body); # BLD/INT Label
    $worksheet->write_string($i+1,4,$ref->{$_}{timestamp},$format_body); # Time Stamp
    $worksheet->write_string($i+1,5,$ref->{$_}{component},$format_body); # Component/FA
    $worksheet->write_string($i+1,6,$ref->{$_}{state},$format_body); # State
    $worksheet->write_string($i+1,7,$ref->{$_}{TA},$format_body); # Technical Authority
    $worksheet->write_string($i+1,8,$ref->{$_}{CRN},$format_body); # CR
    $worksheet->write_string($i+1,9,$ref->{$_}{SRN},$format_body); # Parent SR
    $worksheet->write_string($i+1,10,$ref->{$_}{HL},$format_body1); # Headline
    $i++;
  }
  $worksheet->merge_range($i+1,0,$i+1,10," ",$format_mergecell);
  $worksheet->merge_range($i+2,0,$i+2,10,"Merges completed/Total Merges Required = $completed/$total",$format_mergecell);

  #chmod(0666,$file)|| die("cannot chmod on file $file ");

}

sub check_user_role {
  my ($crstat_config) = @_;
  my $scm = `cat $crstat_config/wibbscm 2>&1`;
  ($scm =~ /cat:/) && die("crstat error - $scm");
  if ($scm =~ /$ENV{USER}/) {
    return 'SCM';
  }
  else {
    return 'DEVELOPMENT';
  }
}

#####################################################################
#
# main
#
#####################################################################
#####################################################################
#
# Several considerations are taken into account:
# 1. A series corresponds to a branch name or a branch pattern.
# 2. A directory has a one-to-one relationship with a compass folder.
# 3. A vobfamily is used for ClearCase query inside the vob.
#
#####################################################################

eval {
  # Process command line arguments
  my ($series, $directory, $vFamL, $vFamU);
  GetOptions( "series|s=s", "directory|d=s","vobfamily|v=s");
  ( defined $opt_series ) || die("crstat warning: $0 -s <series> -d <directory> -v {wibb_bts|wibb_capc|wibb_cpe}\n");
  $series = $opt_series;
  ( defined $opt_directory) || die("crstat warning: $0 -s <series> -d <directory> -v {wibb_bts|wibb_capc|wibb_cpe}\n");
  $directory = $opt_directory;
  ( defined $opt_vobfamily) || die("crstat warning: $0 -s <series> -d <directory> -v {wibb_bts|wibb_capc|wibb_cpe}\n");
  $vFamL = lc $opt_vobfamily;
  $vFamU = uc $opt_vobfamily;

  # shared vars
  my $commonView = "wibbstart";

  # Locate the latest integration branch/view in the series. 
  my (@views, @brs, $br); 
  @views = `cleartool lsview -short ${series}* 2>&1`; 
  chomp(@views);
  if ($views[0] =~ /cleartool: Error:/) {
    @brs = `cleartool setview -exe \"cd /vob/$vFamL; cleartool lstype -kind brtype|grep ${series}\" $commonView 2>&1`;
    (@brs == 0) && die("crstat error: no view or branch exists for ${series}");
    ($brs[0] =~ /cleartool: Error:/) && die("crstat error: $brs[0]");
    chomp(@brs);
    $br = (split /\"/, $brs[-1])[1]; # ClearCase lists brtype chronological ascendingly.
  }
  else {
    $br = $views[-1]; # ClearCase lists view alphanumeric ascendingly.  
  }

  # obtain ok-to-merge list on the integration branch from mergestat
  my @crbrs = `/mot/proj/wibb_bts/cmbp/prod/cm-policy/bin/mergestat -l -r -b $br -v $vFamU 2>&1`;
  chomp(@crbrs);
  ($crbrs[0] =~ /^Error:/) && die("crstat error: @crbrs");

  # re-org the output of mergestat for easy sort and field identification
  my $total = 0;
  my %hash;
  foreach (@crbrs) {
    ($_ =~ /\d\d\d\d\d/) || next;
    my @row = split /\t/, $_;
    $hash{$row[0]}{begun} = $row[1];
    $hash{$row[0]}{done} = $row[2];
    $hash{$row[0]}{component} = $row[3];
    $hash{$row[0]}{state} = $row[4];
    $hash{$row[0]}{TA} = $row[5];
    $hash{$row[0]}{CRN} = $row[6];
    $hash{$row[0]}{SRN} = $row[7];
    $hash{$row[0]}{HL} = $row[8];
    $total++;
  }

  # loop through CR branch list to find the earlist BLD/INT/DEVINT label on each CR branch
  my $completed = 0;
  foreach (sort keys %hash) {
    my $key = $_;
    my $elem;
    if ($hash{$key}{begun} =~ "yes") {
      # obtain element list on the CR branch
      my @elem_set = `cleartool setview -exe "cd /vob/$vFamL; cleartool find -all -branch 'brtype($key)' -print 2>&1" $commonView`;
      ($elem_set[0] =~ /cleartool: Error:/) && die("crstat error - @elem_set");
      chomp(@elem_set);
      if (@elem_set == 0) {
        $hash{$key}{label} = "No element on this branch"; # go to next CR
        next;
      }
      else {
        $elem = $elem_set[0] . '/LATEST';
      }

      # describe the valid element on CR brancgh to locate its merged version on the integration branch
      # e.g. Merge@66737593@/vob/wibb_bts -> /vob/wibb_bts/msm/test/sfm_test/make_solaris.mcfg@@/main/wimax_r2.5-main/wmx-ap_r2.5_bld-3.18.00/1
      my $ver_on_cr = `cleartool setview  -exe "cd /vob/$vFamL; cleartool desc -long $elem 2>&1" $commonView`; 
      ($ver_on_cr =~ /cleartool: Error:/) && die("crstat error - $ver_on_cr");
      my $tStamp;
      if ($ver_on_cr =~ /.*?(Merge.+) -> (.+$br\/\d+)/) { # ? is used for minimal match to locate the first or latest to-merge to integration branch
        my $to_merge_link = $1;
        my $ver_on_int = $2;
        #print "$key(INT ver): $ver_on_int\n";
        # obtain label list on the merged version on integration branch
        my $lb_set = `cleartool setview -exe "cd /vob/$vFamL; cleartool desc -fmt "%Nl" $ver_on_int 2>&1" $commonView`;
        ($lb_set =~ /cleartool: Error:/) && die("crstat error - $lb_set");
        if ($lb_set eq "") {
          $hash{$key}{label} = "No label found";
          $tStamp = `cleartool setview -exe "cd /vob/$vFamL; cleartool desc -fmt "%d" hlink:$to_merge_link 2>&1" $commonView`;
          ($tStamp =~ /cleartool: Error:/) && die("crstat error - $tStamp");
          $hash{$key}{timestamp} = "Merged on $tStamp";
        }
        else {
          my @label = split /\s+/, $lb_set;
          my $label = "no valid label is found";
          # Loop through labels backwardly to locate the earliest BLD/INT/DEVINT label
          for ($i = $#label; $i >= 0; $i--) {
            if($label[$i] =~ /BLD|INT|DEVINT/) {
              $label = $label[$i];
              last;
            }
          }
          if ($label =~ /no valid label is found/) {
            $hash{$key}{label} = "No Valid BLD|INT|DEVINT label found";
            $tStamp = `cleartool setview -exe "cd /vob/$vFamL; cleartool desc -fmt "%d" hlink:$to_merge_link 2>&1" $commonView`;
            ($tStamp =~ /cleartool: Error:/) && die("crstat error - $tStamp");
            $hash{$key}{timestamp} = "Merged on $tStamp";
          }
          else {
            $tStamp = `cleartool setview -exe "cd /vob/$vFamL; cleartool desc -fmt "%d" lbtype:$label 2>&1" $commonView`;
            ($tStamp =~ /cleartool: Error:/) && die("crstat error - $tStamp");
            $hash{$key}{timestamp} = "Created on $tStamp";
            if ($hash{$key}{done} =~ "yes") {
              $hash{$key}{label} = $label;
              $completed++;
            }
            else {
              $hash{$key}{label} = "$label";
            } # end of merge done check
          } # end of valid label  check
        } # end of not build check
      }
      else { # Some element on the CR branch wasn't merged to integration, patch, or feature branch!
        $hash{$key}{label} = "Problematic CR branch"; 
      } # end of ver_on_cr to-merge link check
    }
    else {
      $hash{$key}{label} = "Not Merged Yet";
    }
  }

  #print_output(\%hash,$completed,$total);

  # check user roles
  my $role = check_user_role('/mot/proj/wibb_capc/daily/crstat/config');

  # decide output file name and location depending on -d option and user roles
  my ($crstat_home, $file);
  if ($directory =~ /^\//) { # not using default crstat home
    $crstat_home = $directory;
  }
  else {
    $crstat_home = "/mot/proj/$vFamL/daily/crstat/$directory";
  }
  (($role eq 'DEVELOPMENT') && ($crstat_home =~ /\/mot\/proj\/$vFamL\/daily\/crstat/)) && die("crstat error: $role cannot write to $crstat_home");
  $file = "$crstat_home/$br.xls";
  if (-e $crstat_home && -w $crstat_home) {
    excel_output(\%hash,$completed,$total,$file,$br);
  }
  else {
    print "crstat error: $crstat_home not exist or not writable\n";
  }

};
if ($@) {
  #print "$@";
  my $sender = 'jchen4@motorola.com';
  my $recipient = 'jchen4@motorola.com';
  my $errorlog = "/mot/proj/wibb_capc/daily/crstat/log/error.log";
  my $fh = new FileHandle;
  $fh->open(">$errorlog") || die("crstat error - cannot write to $errorlog");
  print $fh "To: $recipient\n";
  print $fh "Subject: crstat failed\n\n";
  print $fh "$@";
  system("/usr/lib/sendmail -t -oi -f $sender < $errorlog`");
  exit 1;
}
