#!/apps/public/bin/perl5

############################################################
##
##    build <-g group>
##
##    where group is one of  sun4s11, sun4-sol251, sun4-sol2
##    default group is sun4-sol2
##    this will throw up an xterm in appropriate comp server
##
##    This perl script will consolidate/replace all legacy sh based
##    build scripts, which relied on lbrun besides bsub
##
##    Following are build scripts which are consolidated into this
##            build, buildsol, buildsol251, buildibsc, buildjdk, buildsun4,
##            buildsun3, buildsol260, buildsun4-sol2, buildsun4-sol251, 
##            buildsun4-sol260, buildjdk-sol26, sol9comp, verizon-xterm
##
##    Guna Selvaraj[GSELVAR1]
##    
##############################################################


require 5.004;
use English;
use Getopt::Long;

## For debugging
my $debug = "0";

## flush stdout
$|=1;

## Usage string
my $Usage = 
"$0 <-h> <-d> <-g group> 
        -h       print usage and exit
        -d       turn debug on
        -g       valid groups are
                   sun4s11/sunos413    -   SunOS 4.1.3    [ masoniteXX ]
                   sun4-sol251/comp251 -   Solaris 2.5.1  [ plywoodXX ] 
                   sun4-sol2/compute   -   Solaris 2.6    [ compXX ]
                   ibsc/ibsccmp        -   Solaris 2.6    [ ibsccmp nodes ] 
                   sol9comp            -   Solaris 2.9    [ sol9-comp nodes ] 
                   sol10compute        -   Solaris 10     [ sol10comp nodes ]
                   verizon-xterm       -   login 2,3,5 for verizon access 
 This script throws up an xterm in appropriate compute node.
 Users are strongly encouraged to use LSF batch job submission
 command bsub, inside their build scripts,  and use this
 only to debug and preparatory purposes. This script is owned
 and maintained by GTSS EC. http://rc.mot.com/
";
 

## Define variables/commands
my ( $Queue, $Title );
my @command          =    "/usr/openwin/bin/xterm" ;
my $bsub_command     =    "/apps/vendor/lsf/bin/bsub";
my $lsf_check        =    "/apps/vendor/lsf/bin/lsid >/dev/null 2>&1" ;
my $Project          =    "BUILDX" ;

## Getopt config options
## dont mix options with non options - so command options dont clash with bsub's
Getopt::Long::config ('no_auto_abbrev', 'no_ignore_case',
                       'no_bundling', 'pass_through', 'require_order');

## now parse the options
GetOptions qw ( -h -g=s -d );

## if the user wants help or have extra arguments
## just print the usage and exit
if ( $opt_h or ($#ARGV > -1 ) ) {
   print $Usage;
   exit(! $opt_h); ## 0 if asked for help, 1 otherwise
};

## debug ?
$debug = "1"  if ($opt_d);

## check display! exit if not set
if ( ! $ENV{"DISPLAY"} ) {
   print "DISPLAY not set!! Exiting....\n";
   exit(1);
}
print ("Display is ", $ENV{"DISPLAY"}, "\n") if ( $debug );

## Keep quiet even if you see locale problems!!
$ENV{"PERL_BADLANG"} = "0" if (! $debug) ;

## quiet bsub
$ENV{"BSUB_QUIET"} = "1" if ( ! $ENV{"BSUB_QUIET"} || ! $debug ) ;

## group option
if ( $opt_g ){
   print "supplied group is $opt_g\n" if ($debug);
   if ( $opt_g =~ /sun4-sol251|comp251/ ) { $Queue = "comp251"; $Project = "BUILDSOL25"; }
   elsif ( $opt_g =~ /sun4-sol2|compute/ ) { $Queue = "compute"; $Project = "BUILDSOL26"; }
   elsif ( $opt_g =~ /sun4s11|sunos413/ ) { $Queue = "sunos413"; $Project = "BUILDSUN4"; }
   elsif ( $opt_g =~ /ibsccmp/ ) { $Queue = "ibsccomp" ; $Project = "BUILDIBSC"; }
   elsif ( $opt_g =~ /ibsctest|ibsccmptest/ ) { $Queue = "ibsccomp_test" ; $Project = "BUILDIBSC"; }
   elsif ( $opt_g =~ /sol9comp/ ) { $Queue = "sol9compute"; $Project = "SOL9COMP" ; }
   elsif ( $opt_g =~ /sol10compute/ ) { $Queue = "sol10compute"; $Project = "SOL10COMP" ; }
   elsif ( $opt_g =~ /verizon-xterm/ ) { $Queue = "verizon"; $Project = "VERIZON" ;}
   else { print $Usage; exit(1) };
   $Title = "build-${opt_g}" ;
} else {
   print "no group specified, checking my name\n" if ($debug);
   ## let us check the prog name, basename
   my ( @tmp ) = split /\//, $0 ;
   my $Basename = $tmp[$#tmp] ;
   print "my full name was $0, so Basename is $Basename\n" if ($debug);

   $Title = "$Basename";
   if ( $Basename =~ /buildibsc/ ) {
      $Queue = "ibsccomp" ;
      $Project = "BUILDIBSC" ;

   }elsif ( $Basename =~ /buildjdk-sol26|buildsun4-sol260|buildsol\b|buildsol260/ ) {
      $Queue   = "compute" ;
      $Project = "BUILDSOL26" ;

   }elsif ( $Basename =~ /buildjdk|buildsol251|buildsun4-sol251/ ) {
      $Queue = "comp251" ;
      $Project = "BUILDSOL25" ;

   }elsif ( $Basename =~ /buildsun4|buildsun4s11|buildsun3/ ) {
      $Queue = "sunos413" ;
      $Project = "BUILDSUN4" ;

   }elsif ( $Basename =~ /buildsol9/ ) {
      $Queue = "sol9compute" ;
      $Project = "SOL9COMP" ;

   }elsif ( $Basename =~ /buildsol10/ ) {
      $Queue = "sol10compute" ;
      $Project = "SOL10COMP" ;

   }elsif ( $Basename =~ /verizon-xterm/ ) {
      $Queue = "verizon" ;
      $Project = "VERIZON" ;

   }elsif ( $Basename =~ /buildtest/ ) {
      $Queue = "ibsccomp_test" ;
      $Project = "BUILDIBSC" ;
   } else {
      $Queue = "compute" ; $Title = "build-default";

   } 
};

print "destination queue is $Queue\n" if ($debug);


## xterm command
@command = "/usr/bin/X11/xterm" if ( $Queue =~ /sunos413/ );

## xterm options
push (@command,"-ls", "-sb", "-T", "$Title", "-n", "$Title") ;

## bsub options
my @bsub_options;
push (@bsub_options, "-Is", "-J", "$Title", "-P", "$Project", "-q", "$Queue" ) ;
push (@bsub_options, "-o", "/dev/null", "-e", "/dev/null") if (!$debug) ;
#push (@bsub_options, "-I" ) if ($debug) ;

print ( "$bsub_command", " @bsub_options", " @command", "\n" ) if ($debug) ;

my $check= `$lsf_check` if ($debug);
if ( -x $bsub_command or  ! system($lsf_check) ) {
   print "Launching xterm window, it might take few seconds to appear...\n";
   exec ( $bsub_command, @bsub_options, @command );
} else {
   print "$lsf_check output is $check\n" if ($debug);
   print "ERROR: Cant submit a lsf job from this host,
          Please raise a trouble ticket with EC at
	  http://rc.mot.com/\n";
};
