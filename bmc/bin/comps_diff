#!/bin/csh -f

################################################################################
#
# GTSS Common Application Wrapper Template For UNIX Platforms (CSH)
#
# Author: Luc Tran
#         GTSS/Engineering Computing
#         Fort Worth, TX 76137
#
# Version: 2.2
#
################################################################################
#					Revision
#
#	mm/dd/yyyy	userid		description
#	----------	------		---------------------------------------------------
#	10/04/2002	qlt000		Update to handle LSF options that contains double
#							quotes such as -R "select[type=HPPA11]"
#	10/10/2002	qlt000		Get rid of -himem option for LSF since this is FW
#							site specific
#	10/11/2002	qlt000		Added "Linux" /usr/bin/id to get group and user id
#	11/14/2002	qlt000		Move load_balance_cmd to Common Environment Template.
#							Check for valid LSF hosts using lsid command.
#	11/18/2002	qlt000		Fixed load_balance_status=0 when load_balance=none
#	11/19/2002	qlt000		Determine if lsid command is available.
#							Added check for LSFUSER variable.
#							Allow invoke_cmd variable as definable
#	01/16/2005	qlt000		Upgrade to LSF 5.1
#
################################################################################
#
# NOTE: This wrapper will source the environment file
#
#		source ${env_dir}/${sw_type}/${vendor}/${sw_name}_${sw_version}
#
#		Example: source /apps/vendor/configs/environments/agilent/ads_v2002
#
################################################################################
#
# Modify the following variables
#
# 1. Set software type, the three discipline (vendor, public, internal)
#    Example: set sw_type=vendor|public|internal
set sw_type=internal

# 2. Set environments directory, dependent on ${sw_type}
set env_dir="/apps/${sw_type}/configs/environments/"

# 3. Set application name
#    Example: set sw_name=ads
set sw_name=comps_diff

# 4. Set default version from the list of available versions
#    Format: v${app_version}
#    Example: set default_version="v2002"
set default_version="v2006"

# 5. Set available versions separated by space
#    Format: "v${app_version1} v${app_version2}"
#    Example: set sw_versions="v2001 v2002"
set sw_versions="v2006"

# 6. Set Usage logfile
#    Make sure this file exist and permission is 777
set usage_logfile="/apps/${sw_type}/logs/usage/${sw_name}.log"

# 7. Enable or Disable Logging to Usage Logfile (enabled|disabled)   
set logfile_status="enabled"

# 8. Set Load Balance Software & Command (lsf|gridengine|none)
#		lsf = Platform's LSF
#		gridengine = Sun's Grid Engine 
#		none = No Load Balance Software
#
# ------ Platform's LSF ------
set load_balance="lsf"
#set load_balance_env="/apps/vendor/configs/lsf/conf/cshrc.lsf.TX14"
set load_balance_env="/apps/vendor/configs/environments/lsf_v6.1"
#
# ------ Sun's Grid Engine ------
#set load_balance="gridengine"
#set load_balance_env="/apps/vendor/sungrid_v1.0/default/common/settings.csh"

# ------- Define Invocation Command  ------
# Default is to get the name of the program being executed
# Change this if you do not wish to use the application executable name
#
# Example: /apps/vendor/bin/valor -> /apps/vendor/configs/wrappers/valor
#          Wrapper: set invoke_cmd="get -direct"
# 
set invoke_cmd=`basename $0`
#
# End Modification
################################################################################
#
# Modification below this line at your own risk
#
################################################################################
#
#     Wrapper basically processes arguments, sources an environment file and
#     executes the base command with arguments.
#
#     !!WARNING!! The enviroment file which is sourced MUST HAVE 
#     path set up .i.e 
#     set path = (your_command_location/bin $path)
#     if not you could create a recursive loop. 
#
#     ->Process arguments
#     1. Check arguments to see if user set specific version 
#     2. Get total number of arguments passed 
#     3. Concatenate arguments into variable app_args and find position 
#        of version argument   
#
#     ->Debug
#     4. Output debug print statements 
#
#     ->Set up environment
#     5. Source environment file
# 
#     ->Set up base command
#     6. Capture base command in invoke_cmd variable 
#
#     ->Check load balancing
#     7. Check if lsf or gridengine running
#
#     ->if needed give script help
#     8. if help argument set echo how to run script
#
#     ->Capture information for logs
#     9. Get nodename, type, userid, group and start time 
#
#     -> *** EXECUTE COMMAND HERE *** 
#     10. Call exec_cmd
#
#     ->Capture end time for log 
#     11. Capture end time 
#
#     ->Log usage 
#     12. Echo captured information to usage logs
#
#
##############################################################################
#
# Set usage message
set usage1="Available Versions: ${sw_versions}"
set usage2="Usage: $0 version apps_options"

#-------------------------------------------------------------
#
#     1. Check arguments to see if user set specific version 
#
#-------------------------------------------------------------
# Determine if version is in the list
set input_args="$*"
set version_found=0

# Find -h|help in command
set help_option=0
set gridengine_option=0
foreach version ($sw_versions)
	foreach option (${input_args})
		if ("${version}" == "${option}") then
			set selected_version=$version
			set version_found=1
		else if ("${option}" == "-h" || "${option}" == "-help") then
			set help_option=1  
		else if ("${option}" == "${load_balance}") then
			set gridengine_option=1
		endif
	end
end

#-------------------------------------------------------------
#
#     2. Get total number of arguments passed 
#
#-------------------------------------------------------------
# Find total number of args
set total_args=0
foreach option (${input_args})
	set total_args=`expr ${total_args} + 1`
end

#-------------------------------------------------------------
#
#     3. Concatenate arguments into variable app_args and find position 
#        of version argument   
#
#-------------------------------------------------------------
# Set final passed args
if ($version_found == 1) then
	set cnt=1
	set apps_args=""
	foreach option (${input_args})
		if ("$option" != "${load_balance}") then
			if ("${selected_version}" == "${option}") then
				set optpos = ${cnt}
			else
				set apps_args="$apps_args $option"
			endif
			set cnt=`expr ${cnt} + 1`
		endif
	end
else
	set selected_version=$default_version
	set apps_args=""
	foreach option (${input_args})
		if ("$option" != "${load_balance}") then
			echo $option
			set apps_args="$apps_args $option"
		endif
	end
endif

#-------------------------------------------------------------
#
#     4. Output debug print statements 
#
#-------------------------------------------------------------
echo "Available Versions : ${sw_versions}"
echo "Selected Version   : ${selected_version}"
#echo "Option Position   : ${optpos}"
#echo "Total Args        : ${total_args}"
#echo "Apps Args         : ${apps_args}"

#-------------------------------------------------------------
#
#     5. Source environment file
#
#-------------------------------------------------------------
# Set correct environments
set env_file="${env_dir}${sw_name}_${selected_version}"
if (-f "${env_file}") then
	set env_cmd="source ${env_file}"
	echo
	echo "Source Env: ${env_cmd}"
	${env_cmd}
  
	if ($die == 1) then
		exit
	endif
else
	echo "ERROR: Environment File ${env_file} does not exist."
	exit
endif

#-------------------------------------------------------------
#
#     6. Capture base command in invoke_cmd variable 
#
#-------------------------------------------------------------
#set invoke_cmd=`basename $0`

#-------------------------------------------------------------
#
#     7. Load Balancing
#
#-------------------------------------------------------------

if (${load_balance} == "lsf") then
	#-------------------------------------------------------------
	#
	#     7a. Platform's LSF
	#
	#-------------------------------------------------------------
	
	# Determine if node is allowed to run Load Sharing (LSF) using the lsid command
	if (-f "${load_balance_env}") then
		source ${load_balance_env}
	else
		echo "ERROR: Environment File ${load_balance_env} does not exist."
		exit
	endif
	
	set get_process="`/bin/which lsid | /bin/grep "\""no lsid in"\""`"
	if ($status == "0") then
		set load_balance_status=0
	else
		set get_process="`lsid | /bin/grep "\""My master name is"\""`"
		if ($status == 0) then
			set load_balance_status=1
		else
			set load_balance_status=0
		endif
	endif

	#-------------------------------------------------------------
	#
	#     7a. Add arguments (app_args) to base command 
	#
	#-------------------------------------------------------------
	# Set exec command
	if ($load_balance_status == 1) then
		#if ( ! $?LSFUSER ) then
			set exec_cmd="source ${load_balance_env}; ${env_cmd}; ${load_balance_cmd} ${invoke_cmd} ${apps_args}"
		#else
		#	set exec_cmd="${invoke_cmd} ${apps_args}"
		#endif
	else
		set exec_cmd="${invoke_cmd} ${apps_args}"
	endif
else if (${load_balance} == "gridengine") then
	#-------------------------------------------------------------
	#
	#     7b. Sun's Grid Engine
	#
	#-------------------------------------------------------------
	if ($gridengine_option == 0) then
	
		# Determine if node is Sun's Grid Engine
		set get_process="`/bin/ps -ef | /bin/grep sge_execd | /bin/grep -v grep`"
		if ($status == 0) then
			set load_balance_status=1
			if (-f "${load_balance_env}") then
				source ${load_balance_env}
			else
				echo "ERROR: Environment File ${load_balance_env} does not exist."
				exit
			endif
		else
			set load_balance_status=0
		endif

		#-------------------------------------------------------------
		#
		#     7a. Add arguments (app_args) to base command 
		#
		#-------------------------------------------------------------
		# Set exec command
		if ($load_balance_status == 1) then
			set exec_cmd="${load_balance_cmd} ${invoke_cmd} ${load_balance} ${apps_args}"
		else
			set exec_cmd="${invoke_cmd} ${apps_args}"
		endif
	else
		set exec_cmd="${invoke_cmd} ${apps_args}"
	endif
else
	#-------------------------------------------------------------
	#
	#     7c. No Load Balance Software
	#
	#-------------------------------------------------------------
	set exec_cmd="${invoke_cmd} ${apps_args}"
	set load_balance_status=0
endif


#-------------------------------------------------------------
#
#     8. if help argument set echo how to run script
#
#-------------------------------------------------------------
# Echo wrapper help
if ($help_option == 1) then
	echo $usage1
	echo $usage2
	echo
	exit
endif

#-------------------------------------------------------------
#
#     9. Get nodename, type, userid, group and start time 
#
#-------------------------------------------------------------
# Capture nodename
set nodename=`/bin/uname -n`

# Get os type
set os_type=`/bin/uname -s`

# Capture userid and group
if (${os_type} == "HP-UX") then
	# Get Group Name
	set gid=`/bin/id -ng`
	
	# Get User ID
	set user_id=`/bin/id -nu`
		
else if (${os_type} == "SunOS") then
	# Get Group Name
	set gid=`/usr/xpg4/bin/id -ng`

	# Get User ID
	set user_id=`/usr/xpg4/bin/id -nu`
else if (${os_type} == "Linux") then
	# Get Group Name
	set gid=`/usr/bin/id -ng`
	
	# Get User ID
	set user_id=`/usr/bin/id -nu`
else
	# Get Group Name
	set gid=`/bin/id -ng`
	
	# Get User ID
	set user_id=`/bin/id -nu`
endif

# Capture start time
set start_time=`/bin/date "+%x %X %Z"`

#-------------------------------------------------------------
#
#     -> *** EXECUTE COMMAND HERE *** 
#     10. Call exec_cmd
#
#-------------------------------------------------------------
echo "Exec Command: ${exec_cmd}"
echo
if (${load_balance} == "lsf" && $load_balance_status == 1) then
	eval "${exec_cmd}"
else
	${exec_cmd}
endif

#-------------------------------------------------------------
#
#     11. Capture end time 
#
#-------------------------------------------------------------
# Capture end time
set end_time=`/bin/date "+%x %X %Z"`

#-------------------------------------------------------------
#
#     12. Echo captured information to usage logs
#
#-------------------------------------------------------------
# Log usage
if (${logfile_status} == "enabled") then
	echo "${user_id}::${gid}::${nodename}::${selected_version}::${exec_cmd}::${start_time}::${end_time}" >> ${usage_logfile}
endif

exit
